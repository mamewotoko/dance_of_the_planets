(use math.const)
(use gtk)

(define canvas-len 400)

(define color0 (gdk-color-parse "#000000"))
(define color1 (gdk-color-parse "#0000ff"))
(define color2 (gdk-color-parse "#ff0000"))
(define color3 (gdk-color-parse "#00ff00"))
(define color4 (gdk-color-parse "#800080"))
(define color5 (gdk-color-parse "#800000"))
(define color6 (gdk-color-parse "#8b0000"))
(define color7 (gdk-color-parse "#202f55"))
(define color-default (gdk-color-parse "#ffa500"))

(define (color-of-i i)
  (case i
    ((0) color0)
    ((1) color1)
    ((2) color2)
    ((3) color3)
    ((4) color4)
    ((5) color5)
    ((6) color6)
    ((7) color7)
    (else color-default)
  ))

(define (dance area inner-planet outer-planet orbits)
  (let* ((drawable (ref area 'window))
         (inner-planet-year 224.701) ; venus
         (outer-planet-year 365.256) ; earth
         (inner-planet-radius 108.21)
         (outer-planet-radius 149.60)
         (interval-days (/ outer-planet-year 75))
         (ycenter (/ canvas-len 2))
         (xcenter (/ canvas-len 2))
         (r1 ycenter)
         (r2 (/ (* r1 inner-planet-radius) outer-planet-radius))
         (r 0.0)
         (a1 0.0)
         (a2 0.0)
         (rstop (* outer-planet-year orbits))
         (a1-interval (/ (* 2 pi interval-days) outer-planet-year))
         (a2-interval (/ (* 2 pi interval-days) inner-planet-year))
         (colormap (gdk-colormap-get-system))
         )
    ; TODO: use gdk-colormap-alloc-colors
    (gdk-colormap-alloc-color colormap color0 #f #t)
    (gdk-colormap-alloc-color colormap color1 #f #t)
    (gdk-colormap-alloc-color colormap color2 #f #t)
    (gdk-colormap-alloc-color colormap color3 #f #t)
    (gdk-colormap-alloc-color colormap color4 #f #t)
    (gdk-colormap-alloc-color colormap color5 #f #t)
    (gdk-colormap-alloc-color colormap color6 #f #t)
    (gdk-colormap-alloc-color colormap color7 #f #t)
    (gdk-colormap-alloc-color colormap color-default #f #t)
    (while (< r rstop)
           (let* ((i (x->integer (/ r (* interval-days 75.0))))
                  (color (color-of-i i)))
             (set! a1 (- a1 a1-interval))
             (set! a2 (- a2 a2-interval))
             (let* ((x1 (x->integer (+ (* r1 (cos a1)) xcenter)))
                    (y1 (x->integer (+ (* r1 (sin a1)) ycenter)))
                    (x2 (x->integer (+ (* r2 (cos a2)) xcenter)))
                    (y2 (x->integer (+ (* r2 (sin a2)) ycenter)))
                    (gc (gdk-gc-new drawable)))
               (gdk-gc-set-foreground gc color)
               (gdk-draw-line drawable gc x1 y1 x2 y2)))
           (set! r (+ r interval-days))
           )
  ))


(define (main args)
  (gtk-init args)
  (let* ((w (gtk-window-new GTK_WINDOW_TOPLEVEL))
         (area (gtk-drawing-area-new))
         )
    (gtk-container-add w area)
    (g-signal-connect w "destroy" (lambda _ (gtk-main-quit)))
    (g-signal-connect area "expose_event" (lambda _ (dance area "" "" 8.0)))
    (gtk-widget-set-size-request area canvas-len canvas-len)
    (gtk-widget-show-all w)
    (gtk-main)
    0))
